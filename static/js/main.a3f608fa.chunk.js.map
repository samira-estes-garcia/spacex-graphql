{"version":3,"sources":["graphql/get-launches.js","spacex.jpeg","components/Launch.js","containers/LaunchesContainer.js","App.js","index.js"],"names":["GET_LAUNCHES","gql","Launch","launch","useState","isFlipped","setIsFlipped","handleClick","flipDirection","className","onClick","imgArr","randomImage","Math","floor","random","length","src","alt","spacex","getImage","links","flickr_images","mission_name","launch_site","site_name_long","year","currentYear","Date","getFullYear","yearsAgo","console","log","launch_year","details","launch_date_local","date","reformatDate","toDateString","href","video_link","target","rel","LaunchesContainer","useQuery","variables","limit","data","launches","map","id","App","client","ApolloClient","uri","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAEaA,E,MAAeC,GAAH,+S,yBCFV,MAA0B,oC,OCI5BC,EAAS,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAAY,EAGEC,oBAAS,GAHX,mBAGzBC,EAHyB,KAGdC,EAHc,KAK1BC,EAAc,WACZD,GAAcD,IAmCtB,OACI,eAAC,IAAD,CAAeA,UAAWA,EAAWG,cAAc,aAAnD,UACI,sBAAKC,UAAU,eAAeC,QAASH,EAAvC,UACI,qBAAKE,UAAU,aAAf,SAtBK,SAACE,GACd,IAAIC,EAAcD,EAAOE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAOK,SAE3D,OAAIL,EAAOK,OAAS,EACT,qBAAKP,UAAU,MAAqCQ,IAAKL,EAAaM,IAAKN,GAA3E,UAA6BD,EAAOC,KAErC,qBAAKH,UAAU,UAAUQ,IAAKE,EAAQD,IAAI,gBAiBvCE,CAASjB,EAAOkB,MAAMC,iBAE3B,qBAAKb,UAAU,cAAf,SACI,6BAAKN,EAAOoB,iBAEhB,qBAAKd,UAAU,cAAf,SACI,4BAAIN,EAAOqB,YAAYC,mBAE3B,qBAAKhB,UAAU,cAAf,SA3CK,SAACiB,GACd,IAAIC,GAAc,IAAIC,MAAOC,cAC7B,GAAIF,EAAcD,EAAM,CACtB,IAAII,EAAWH,EAAcD,EAE7B,OAAO,2CAAcI,EAAd,gBAEPC,QAAQC,IAAI,uBAqCDF,CAAS3B,EAAO8B,kBAIzB,sBAAKxB,UAAU,cAAcC,QAASH,EAAtC,UACI,qBAAKE,UAAU,iBAAf,SACI,4BAAIN,EAAO+B,YAEf,qBAAKzB,UAAU,cAAf,SA5BC,SAAC0B,GACV,IAAIC,EAAO,IAAIR,KAAKO,GAChBE,EAAeD,EAAKE,eACxB,OAAO,2CAAcD,KA0BRD,CAAKjC,EAAOgC,qBAEjB,qBAAK1B,UAAU,eAAf,SACI,mBAAG8B,KAAMpC,EAAOkB,MAAMmB,WAAYC,OAAO,SAASC,IAAI,sBAAsBjC,UAAU,eAAtF,oCCjEPkC,EAAoB,WAAO,IAAD,EACMC,mBAAS5C,EAAc,CAC5D6C,UAAW,CAAEC,MAAO,MADhBC,KAD2B,gBACD,GADC,GACnBC,gBADmB,MACR,GADQ,EAKnC,OACI,qBAAKvC,UAAU,qBAAf,SACKuC,GAAYA,EAASC,KAAI,SAAA9C,GAAM,OAAI,cAAC,EAAD,CAAwBA,OAAQA,GAAnBA,EAAO+C,U,MCSrDC,MAff,WACE,IAAMC,EAAS,IAAIC,IAAa,CAC9BC,IAAK,qCAGP,OACE,cAAC,iBAAD,CAAgBF,OAAQA,EAAxB,SACE,iCACE,oBAAI3C,UAAU,UAAd,gCACA,cAAC,EAAD,UCXR8C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a3f608fa.chunk.js","sourcesContent":["import gql from 'graphql-tag';\n\nexport const GET_LAUNCHES = gql`\nquery launchesPast($limit: Int!) {\n  launches(limit: $limit) {\n    id\n    launch_date_local\n    launch_year\n    mission_id\n    mission_name\n    details\n    links {\n      flickr_images\n      video_link\n    }\n    launch_site {\n      site_name_long\n    }\n  }\n}\n`\n\n// query launchesPast($limit: Int!) {\n//   launchesPast(limit: $limit) {\n//     id\n//     mission_name\n//     details\n//     launch_date_local\n//     launch_site {\n//       site_name_long\n//     }\n//     links {\n//       video_link\n//       flickr_images\n//     }\n//     rocket {\n//       rocket_name\n//       rocket_type\n//     }\n//   }\n// }","export default __webpack_public_path__ + \"static/media/spacex.bbdf1a63.jpeg\";","import React, { useState } from 'react';\nimport ReactCardFlip from 'react-card-flip'\nimport spacex from '../spacex.jpeg'\n\nexport const Launch = ({launch}) => {\n\n    // set state for card flip\n    const [isFlipped, setIsFlipped] = useState(false);\n\n    const handleClick = () => {\n            setIsFlipped(!isFlipped);\n    }\n\n    // calculates how many years ago the mission launched\n    const yearsAgo = (year) => {\n        let currentYear = new Date().getFullYear();\n        if (currentYear > year) {\n          let yearsAgo = currentYear - year\n        //   console.log(yearsAgo);\n          return <p>Launched: {yearsAgo} years ago</p>\n        } else {\n          console.log(\"Hasn't happened yet\")\n        }\n    }\n\n    // display random flickr image if flickr image array not empty\n    const getImage = (imgArr) => {\n        let randomImage = imgArr[Math.floor(Math.random() * imgArr.length)];\n        //console.log(randomImage);\n        if (imgArr.length > 0) {\n            return <img className=\"img\" key={`${imgArr[randomImage]}`} src={randomImage} alt={randomImage} />\n        } else {\n           return <img className=\"alt-img\" src={spacex} alt=\"Placeholder\" />\n        }\n    }\n\n\n    //reformat date to readable string\n    const date = (launch_date_local) => {\n        let date = new Date(launch_date_local);\n        let reformatDate = date.toDateString();\n        return <p>Launched: {reformatDate}</p>\n    }\n\n\n    return (\n        <ReactCardFlip isFlipped={isFlipped} flipDirection=\"horizontal\">\n            <div className=\"launch front\" onClick={handleClick}>\n                <div className=\"launch-img\">\n                    {getImage(launch.links.flickr_images)}\n                </div>\n                <div className=\"launch-name\">\n                    <h1>{launch.mission_name}</h1>\n                </div>\n                <div className=\"launch-site\">\n                    <p>{launch.launch_site.site_name_long}</p>\n                </div>\n                <div className=\"launch-year\">\n                    {yearsAgo(launch.launch_year)}\n                </div>\n            </div>\n\n            <div className=\"launch back\" onClick={handleClick}>\n                <div className=\"launch-details\">\n                    <p>{launch.details}</p>\n                </div>\n                <div className=\"launch-time\">\n                    {date(launch.launch_date_local)}\n                </div>\n                <div className=\"launch-links\">\n                    <a href={launch.links.video_link} target=\"_blank\" rel=\"noopener noreferrer\" className=\"youtube-link\">Youtube Video</a>\n                </div>\n            </div>\n    </ReactCardFlip>\n    )\n};","import React from 'react';\nimport { useQuery } from '@apollo/client';\nimport { GET_LAUNCHES } from '../graphql/get-launches'\nimport { Launch } from '../components/Launch';\n\nexport const LaunchesContainer = () => {\n    const { data: { launches = [] } = {} } = useQuery(GET_LAUNCHES, {\n        variables: { limit: 10 },\n    });\n\n    return (\n        <div className=\"launches_container\">\n            {launches && launches.map(launch => <Launch key={launch.id} launch={launch} />)}\n        </div>\n    )\n}","import React from 'react'\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/client'\nimport { LaunchesContainer } from './containers/LaunchesContainer';\nimport './App.css'\n\nfunction App() {\n  const client = new ApolloClient({\n    uri: 'https://api.spacex.land/graphql/'\n  });\n\n  return (\n    <ApolloProvider client={client}>\n      <main>\n        <h1 className=\"heading\">SpaceX GraphQL App</h1>\n        <LaunchesContainer />\n      </main>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}